QUESTION::
--------------------------------------------------------------------------------------------
In this project, let's build an **Appointments App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style="text-align: center;">
    <img src="https://assets.ccbp.in/frontend/content/react-js/appointments-app-output.gif" alt="appointments app output" style="max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/appointments-app-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/appointments-app-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of appointments should be empty and the title input and date input should be empty
- When non-empty values are provided for title and date and the **Add** button is clicked,
  - A new appointment should be added to the list of appointments
  - The value inside the input elements for title and date should be updated to their initial values
- When the **Star** on an appointment is clicked, the appointment should be starred
- The status of the **Starred** filter is updated by clicking on it
- When the **Starred** filter is active, all the starred appointments should be filtered and displayed
- When the **Starred** filter is inactive, the list of all appointments should be displayed
</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style="text-align: center;">
    <img src="https://assets.ccbp.in/frontend/content/react-js/appointments-app-component-breakdown-structure.png" alt="component structure" style="max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Appointments/index.js`
- `src/components/Appointments/index.css`
- `src/components/AppointmentItem/index.js`
- `src/components/AppointmentItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- The HTML input element with the type `date` is designed for the user to select the date from a date picker

  ```jsx
  <input type="date" />
  ```

- The `format` function in the date-fns package can be used to get the formatted date string in the given format

  ```jsx
  import {format} from 'date-fns'

  console.log(format(new Date(2021, 19, 07), 'dd MMMM yyyy, EEEE')) // 19 July 2021, Monday
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- For the `format` function, pass the format string `dd MMMM yyyy, EEEE` as the second argument
- The star button in each appointment should have the data-testid as **star**
- The star image in each appointment should have alt as **star**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/appointments-app/appointments-img.png](https://assets.ccbp.in/frontend/react-js/appointments-app/appointments-img.png) alt should be **appointments**
- [https://assets.ccbp.in/frontend/react-js/appointments-app/star-img.png](https://assets.ccbp.in/frontend/react-js/appointments-app/star-img.png)
- [https://assets.ccbp.in/frontend/react-js/appointments-app/filled-star-img.png](https://assets.ccbp.in/frontend/react-js/appointments-app/filled-star-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style="background-color: #9796f0; width: 150px; padding: 10px; color: black">Hex: #9796f0</div>
<div style="background-color: #fbc7d4; width: 150px; padding: 10px; color: black">Hex: #fbc7d4</div>
<div style="background-color: #ffffff; width: 150px; padding: 10px; color: black">Hex: #ffffff</div>
<div style="background-color: #171f46; width: 150px; padding: 10px; color: white">Hex: #171f46</div>
<div style="background-color: #8b5cf6; width: 150px; padding: 10px; color: black">Hex: #8b5cf6</div>
<div style="background-color: #b5b7c4; width: 150px; padding: 10px; color: black">Hex: #b5b7c4</div>
<div style="background-color: #9897f0; width: 150px; padding: 10px; color: black">Hex: #9897f0</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts youâ€™ve been learning? Take a look at the Cheat Sheets.
---------------------------------------------------------------------------------------------------------------------

ANSWER::
---------------------------------------------------------------------------------------------------------------------

src/App.js::
-----------------------------------------------------------------------
import Appointments from './components/Appointments'

import './App.css'

const App = () => <Appointments />

export default App

--------------------------------------------------------------------------
src/App.css:
-------------------------------------------------------------------------
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
----------------------------------------------------------------------------------------
src/components/Appointments/index.js::
----------------------------------------------------------------------------------------
import {Component} from 'react'

import {v4 as uuidv4} from 'uuid'

import {format} from 'date-fns'

import AppointmentItem from '../AppointmentItem'

import './index.css'

class Appointments extends Component {
  state = {appointmentsList: [], title: '', date: '', isClicked: false}

  onChangeTitle = event => {
    this.setState({title: event.target.value})
  }

  onChangeDate = event => {
    this.setState({date: event.target.value})
  }

  onSubmitAddButton = event => {
    event.preventDefault()
    const {title, date} = this.state

    const modifiedDate = format(new Date(date), 'dd MMMM yyyy, EEEE')

    const newAppointment = {
      id: uuidv4(),
      title,
      date: modifiedDate,
      isFavorite: false,
    }
    this.setState(prevState => ({
      appointmentsList: [...prevState.appointmentsList, newAppointment],
      title: '',
      date: '',
    }))
  }

  onClickOnStar = id => {
    this.setState(prevState => ({
      appointmentsList: prevState.appointmentsList.map(each => {
        if (id === each.id) {
          return {...each, isFavorite: !each.isFavorite}
        }
        return each
      }),
    }))
  }

  onClickOnStarred = () => {
    const {isClicked} = this.state
    this.setState({isClicked: !isClicked})
  }

  render() {
    const {appointmentsList, title, date, isClicked} = this.state

    const starredButton = isClicked ? 'starred-button-style' : 'starred-button'
    const filterList = appointmentsList.filter(each => each.isFavorite === true)

    return (
      <div className="bg-container">
        <div className="top-container">
          <div className="card-container">
            <div>
              <h1 className="heading">Add Appointment</h1>
              <form onSubmit={this.onSubmitAddButton}>
                <label htmlFor="inputElement" className="label-element">
                  TITLE
                </label>
                <br />
                <input
                  type="input"
                  className="input-element"
                  id="inputElement"
                  placeholder="Title"
                  onChange={this.onChangeTitle}
                  value={title}
                />
                <br />
                <label htmlFor="dateElement" className="label-element">
                  DATE
                </label>
                <br />
                <input
                  type="date"
                  className="date-element"
                  id="dateElement"
                  placeholder="dd/mm/yyyy"
                  onChange={this.onChangeDate}
                  value={date}
                />
                <br />
                <button className="add-button" type="submit">
                  Add
                </button>
              </form>
            </div>
            <img
              src="https://assets.ccbp.in/frontend/react-js/appointments-app/appointments-img.png "
              alt="appointments"
              className="appointment-image"
            />
          </div>
          <hr className="separate-line" />
          <div className="bottom-container">
            <div className="heading-container">
              <h1 className="appointment-heading">Appointments</h1>
              <button
                type="button"
                className={starredButton}
                onClick={this.onClickOnStarred}
              >
                Starred
              </button>
            </div>
            <ul className="appointments-items-container">
              {isClicked
                ? filterList.map(eachItem => (
                    <AppointmentItem
                      appointmentItem={eachItem}
                      key={eachItem.id}
                      onClickOnStar={this.onClickOnStar}
                    />
                  ))
                : appointmentsList.map(eachItem => (
                    <AppointmentItem
                      appointmentItem={eachItem}
                      key={eachItem.id}
                      onClickOnStar={this.onClickOnStar}
                    />
                  ))}
            </ul>
          </div>
        </div>
      </div>
    )
  }
}
export default Appointments

--------------------------------------------------------------------------------
src/components/Appointments/index.css::
-----------------------------------------------------------------------------------
.bg-container {
  background-image: linear-gradient(to bottom, #fbc7d4, #9796f0);
  background-size: cover;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
.top-container {
  background-color: #ffffff;
  width: 70vw;
  border-radius: 12px;
  padding: 60px;
}
.card-container {
  display: flex;
  justify-content: space-between;
}
.heading {
  font-size: 30px;
  font-weight: bold;
  font-family: 'Roboto';
  color: #000000;
  margin: 10px;
}
.label-element {
  color: #b5b7c4;
  font-family: 'roboto';
  font-size: 14px;
  font-weight: 500;
  margin: 10px;
}
.input-element {
  color: #000000;
  font-family: 'roboto';
  font-size: 12px;
  font-weight: 500;
  height: 36px;
  width: 300px;
  margin: 10px;
  margin-bottom: 20px;
}

.date-element {
  color: #000000;
  font-family: 'Roboto';
  font-size: 12px;
  font-weight: 500;
  height: 36px;
  width: 300px;
  margin: 10px;
  margin-bottom: 20px;
}
.add-button {
  font-family: 'Roboto';
  color: #ffffff;
  background-color: #8b5cf6;
  border-radius: 6px;
  height: 36px;
  width: 90px;
  margin: 10px;
  border-width: 0px;
}
.appointment-image {
  margin-left: 20px;
  margin-bottom: 20px;
}
@media (max-width: 768px) {
  .appointment-image {
    display: none;
  }
}
.separate-line {
  color: #b5b7c4;
}
.heading-container {
  display: flex;
  justify-content: space-between;
}
.appointment-heading {
  font-size: 24px;
  font-weight: bold;
  font-family: 'Roboto';
  color: #000000;
}
.starred-button {
  background-color: transparent;
  border-width: 1px;
  border-radius: 14px;
  color: #b5b7c4;
  border-color: #b5b7c4;
  font-family: 'Roboto';
  height: 26px;
  width: 80px;
  margin-top: 20px;
}
.appointments-items-container {
  display: flex;
  list-style-type: none;
}
.starred-button-style {
  background-color: #9897f0;
  color: #ffffff;
  border-width: 1px;
  border-radius: 14px;
  border-color: #b5b7c4;
  font-family: 'Roboto';
  height: 26px;
  width: 80px;
  margin-top: 20px;
}
@media (max-width: 768px) {
  .input-element {
    width: 90%;
    font-size: 8px;
    height: 20px;
  }
  .date-element {
    width: 90%;
    font-size: 8px;
    height: 20px;
  }
  .label-element {
    font-size: 12px;
  }
  .card-container {
    width: 70%;
  }
  .top-container {
    padding: 15px;
  }
  .heading {
    font-size: 16px;
  }
  .add-button {
    width: 70px;
    height: 22px;
    font-size: 10px;
  }
  .appointment-heading {
    font-size: 20px;
  }
  .starred-button {
    height: 22px;
    width: 70px;
    font-size: 12px;
  }
  .starred-button-style {
    height: 22px;
    width: 70px;
    font-size: 12px;
  }
}
--------------------------------------------------------------------
src/components/AppointmentItem/index.js::
-----------------------------------------------------------------------
import './index.css'

const AppointmentItem = props => {
  const {appointmentItem, onClickOnStar} = props
  const {title, date, isFavorite, id} = appointmentItem

  const starImgUrl = isFavorite
    ? 'https://assets.ccbp.in/frontend/react-js/appointments-app/filled-star-img.png'
    : 'https://assets.ccbp.in/frontend/react-js/appointments-app/star-img.png'

  const starStyle = isFavorite ? 'styled-star' : 'star'

  const toggleIsFavorite = () => {
    onClickOnStar(id)
  }

  return (
    <li className="item-container">
      <div className="title-container">
        <p className="title">{title}</p>
        <button
          type="button"
          className="star-button"
          onClick={toggleIsFavorite}
          data-testid="star"
        >
          <img src={starImgUrl} alt="star" className={starStyle} />
        </button>
      </div>
      <p className="date-para">{`Date: ${date}`}</p>
    </li>
  )
}
export default AppointmentItem
-----------------------------------------------------------------------------------------
src/components/AppointmentItem/index.css::
-----------------------------------------------------------------------------------------
.item-container {
  height: 16vh;
  width: 25vw;
  border-radius: 10px;
  border-width: 1px;
  border-color: #b5b7c4;
  padding: 15px;
  border-style: solid;
  margin-right: 15px;
}
.title-container {
  display: flex;
  justify-content: space-between;
}
.title {
  font-family: 'Roboto';
  font-size: 20px;
  font-weight: 500;
  color: #000000;
}
.date-para {
  font-family: 'Roboto';
  font-size: 20px;
  font-weight: 500;
  color: #b5b7c4;
  margin-top: 0px;
}
.styled-star {
  color: gold;
  height: 15px;
  width: 15px;
}
.star {
  height: 15px;
  width: 15px;
}
.star-button {
  border-width: 0px;
  background-color: transparent;
  cursor: pointer;
}
@media (max-width: 768px) {
  .item-container {
    width: 100%;
    height: 15vh;
    margin-left: 0px;
  }
  .title {
    font-size: 14px;
  }
  .date-para {
    font-size: 14px;
  }
}

----------------------------------------------------------------------------------
____________________________________________*END*_____________________________________